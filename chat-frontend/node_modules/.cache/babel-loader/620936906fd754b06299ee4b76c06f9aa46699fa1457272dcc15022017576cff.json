{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useRef, useCallback } from 'react';\nconst useWebSocket = () => {\n  _s();\n  const [connected, setConnected] = useState(false);\n  const [messages, setMessages] = useState([]);\n  const wsRef = useRef(null);\n  const connect = useCallback(() => {\n    // Make sure to include '/ws' in the URL to match the Go backend endpoint\n    wsRef.current = new WebSocket('ws://localhost:3000/ws');\n    wsRef.current.onopen = () => {\n      setConnected(true);\n      console.log('Connected to chat server');\n    };\n    wsRef.current.onmessage = event => {\n      console.log('Message received:', event.data);\n      try {\n        const message = JSON.parse(event.data);\n        setMessages(prev => [...prev, message]);\n      } catch (error) {\n        console.error('Error parsing message:', error);\n      }\n    };\n    wsRef.current.onclose = () => {\n      console.log('WebSocket connection closed');\n      setConnected(false);\n      // Attempt to reconnect after 3 seconds\n      setTimeout(connect, 3000);\n    };\n    wsRef.current.onerror = error => {\n      console.error('WebSocket error:', error);\n      setConnected(false);\n    };\n  }, []);\n  useEffect(() => {\n    connect();\n\n    // Cleanup on unmount\n    return () => {\n      if (wsRef.current) {\n        wsRef.current.close();\n      }\n    };\n  }, [connect]);\n  const sendMessage = useCallback(content => {\n    if (wsRef.current && connected) {\n      const message = {\n        content,\n        timestamp: new Date()\n      };\n      console.log('Sending message:', message);\n      wsRef.current.send(JSON.stringify(message));\n      return true;\n    }\n    return false;\n  }, [connected]);\n  return {\n    connected,\n    messages,\n    sendMessage\n  };\n};\n_s(useWebSocket, \"Jz689s2u7DiH0Yorr4ZXfLbIU8w=\");\nexport default useWebSocket;","map":{"version":3,"names":["useState","useEffect","useRef","useCallback","useWebSocket","_s","connected","setConnected","messages","setMessages","wsRef","connect","current","WebSocket","onopen","console","log","onmessage","event","data","message","JSON","parse","prev","error","onclose","setTimeout","onerror","close","sendMessage","content","timestamp","Date","send","stringify"],"sources":["/home/jon/kubernetes/3/chat-frontend/src/hooks/useWebSocket.js"],"sourcesContent":["import { useState, useEffect, useRef, useCallback } from 'react';\n\nconst useWebSocket = () => {\n    const [connected, setConnected] = useState(false);\n    const [messages, setMessages] = useState([]);\n    const wsRef = useRef(null);\n\n    const connect = useCallback(() => {\n        // Make sure to include '/ws' in the URL to match the Go backend endpoint\n        wsRef.current = new WebSocket('ws://localhost:3000/ws');\n\n        wsRef.current.onopen = () => {\n            setConnected(true);\n            console.log('Connected to chat server');\n        };\n\n        wsRef.current.onmessage = (event) => {\n            console.log('Message received:', event.data);\n            try {\n                const message = JSON.parse(event.data);\n                setMessages(prev => [...prev, message]);\n            } catch (error) {\n                console.error('Error parsing message:', error);\n            }\n        };\n\n        wsRef.current.onclose = () => {\n            console.log('WebSocket connection closed');\n            setConnected(false);\n            // Attempt to reconnect after 3 seconds\n            setTimeout(connect, 3000);\n        };\n\n        wsRef.current.onerror = (error) => {\n            console.error('WebSocket error:', error);\n            setConnected(false);\n        };\n    }, []);\n\n    useEffect(() => {\n        connect();\n\n        // Cleanup on unmount\n        return () => {\n            if (wsRef.current) {\n                wsRef.current.close();\n            }\n        };\n    }, [connect]);\n\n    const sendMessage = useCallback((content) => {\n        if (wsRef.current && connected) {\n            const message = {\n                content,\n                timestamp: new Date()\n            };\n            console.log('Sending message:', message);\n            wsRef.current.send(JSON.stringify(message));\n            return true;\n        }\n        return false;\n    }, [connected]);\n\n    return { connected, messages, sendMessage };\n};\n\nexport default useWebSocket;"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,MAAM,EAAEC,WAAW,QAAQ,OAAO;AAEhE,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACQ,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAMU,KAAK,GAAGR,MAAM,CAAC,IAAI,CAAC;EAE1B,MAAMS,OAAO,GAAGR,WAAW,CAAC,MAAM;IAC9B;IACAO,KAAK,CAACE,OAAO,GAAG,IAAIC,SAAS,CAAC,wBAAwB,CAAC;IAEvDH,KAAK,CAACE,OAAO,CAACE,MAAM,GAAG,MAAM;MACzBP,YAAY,CAAC,IAAI,CAAC;MAClBQ,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;IAC3C,CAAC;IAEDN,KAAK,CAACE,OAAO,CAACK,SAAS,GAAIC,KAAK,IAAK;MACjCH,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEE,KAAK,CAACC,IAAI,CAAC;MAC5C,IAAI;QACA,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACJ,KAAK,CAACC,IAAI,CAAC;QACtCV,WAAW,CAACc,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAEH,OAAO,CAAC,CAAC;MAC3C,CAAC,CAAC,OAAOI,KAAK,EAAE;QACZT,OAAO,CAACS,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAClD;IACJ,CAAC;IAEDd,KAAK,CAACE,OAAO,CAACa,OAAO,GAAG,MAAM;MAC1BV,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;MAC1CT,YAAY,CAAC,KAAK,CAAC;MACnB;MACAmB,UAAU,CAACf,OAAO,EAAE,IAAI,CAAC;IAC7B,CAAC;IAEDD,KAAK,CAACE,OAAO,CAACe,OAAO,GAAIH,KAAK,IAAK;MAC/BT,OAAO,CAACS,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;MACxCjB,YAAY,CAAC,KAAK,CAAC;IACvB,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EAENN,SAAS,CAAC,MAAM;IACZU,OAAO,CAAC,CAAC;;IAET;IACA,OAAO,MAAM;MACT,IAAID,KAAK,CAACE,OAAO,EAAE;QACfF,KAAK,CAACE,OAAO,CAACgB,KAAK,CAAC,CAAC;MACzB;IACJ,CAAC;EACL,CAAC,EAAE,CAACjB,OAAO,CAAC,CAAC;EAEb,MAAMkB,WAAW,GAAG1B,WAAW,CAAE2B,OAAO,IAAK;IACzC,IAAIpB,KAAK,CAACE,OAAO,IAAIN,SAAS,EAAE;MAC5B,MAAMc,OAAO,GAAG;QACZU,OAAO;QACPC,SAAS,EAAE,IAAIC,IAAI,CAAC;MACxB,CAAC;MACDjB,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEI,OAAO,CAAC;MACxCV,KAAK,CAACE,OAAO,CAACqB,IAAI,CAACZ,IAAI,CAACa,SAAS,CAACd,OAAO,CAAC,CAAC;MAC3C,OAAO,IAAI;IACf;IACA,OAAO,KAAK;EAChB,CAAC,EAAE,CAACd,SAAS,CAAC,CAAC;EAEf,OAAO;IAAEA,SAAS;IAAEE,QAAQ;IAAEqB;EAAY,CAAC;AAC/C,CAAC;AAACxB,EAAA,CA9DID,YAAY;AAgElB,eAAeA,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}